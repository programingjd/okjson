buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    classpath 'org.jsoup:jsoup:1.11.3'
  }
}

group 'info.jdavid.ok.json'
version '4.3.0'

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

// Keep at 1.6 for Android
sourceCompatibility = 1.6
targetCompatibility = 1.6

println "Java version: ${System.getProperty('java.version')}"

repositories {
  jcenter()
}

dependencies {
  compileOnly files("$projectDir/libs/android.util.log.mock.jar")
  compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
  compile 'com.squareup.okio:okio:1.17.3'
  //compile 'com.squareup.moshi:moshi:1.8.0'
  testCompileOnly 'com.google.code.findbugs:jsr305:3.0.2'
  testCompile 'junit:junit:4.12'
}


jacoco {
  reportsDir = file("$buildDir/jacoco/reports")
}

jacocoTestReport {
  reports {
    xml.enabled false
    csv.enabled false
    html.enabled true
  }
}

jar {
  manifest {
    attributes Sealed: true
  }
}

test {
  jvmArgs '-XX:+IgnoreUnrecognizedVMOptions'
  jvmArgs '--permit-illegal-access'
  jvmArgs '--show-version'
  jacoco {
    append = false
    destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
    classDumpDir = file("$buildDir/jacoco/classpathdumps")
  }
  doLast {
    File html = reports.html.entryPoint
    def doc = org.jsoup.Jsoup.parse(html, 'UTF-8')
    int total = doc.select('#tests > .counter').text() as int
    int failed = doc.select('#failures > .counter').text() as int
    html = jacocoTestReport.reports.html.entryPoint
    doc = org.jsoup.Jsoup.parse(html, 'UTF-8')
    def bars = doc.select('table.coverage>tbody>tr>.bar')
    def firstBarImgs = bars.first().select('>img')
    def lastBarImgs = bars.last().select('>img')
    int missed =
      (firstBarImgs.size() == 1 ? 0 : firstBarImgs.first().attr('title').replaceAll(',','') as int) +
      (lastBarImgs.size() == 1 ? 0 : lastBarImgs.first().attr('title').replaceAll(',','') as int)
    int all =
      (firstBarImgs.last().attr('title').replaceAll(',','') as int) +
      (lastBarImgs.last().attr('title').replaceAll(',','') as int) + missed
    println missed
    println all
    int coverage = (100 * (all - missed) / all) as int
    def readme = file('README.md')
    def badge = { String label, String text, String color ->
      "https://img.shields.io/badge/_${label}_-${text}-${color}.png?style=flat"
    }
    String color = failed == 0 ? 'green' : (failed < 3 ? 'yellow' : 'red')
    String v = project.version
    def download =
      "https://bintray.com/artifact/download/programingjd/maven/info/jdavid/ok/json/okjson/$v/okjson-${v}.jar"
    readme.readLines().withIndex().collect { line, i ->
      switch (i) {
        case 0:
          return "![jcenter](${badge('jcenter', v, '6688ff')}) &#x2003; " +
                 "![jcenter](${badge('Tests', "${total-failed}/${total}", color)}) &#x2003; " +
                 "![jcenter](${badge('Coverage', "${coverage}%25", 'blue')})"
        case 11: return "[Download](${download}) the latest jar."
        case 21: return "  <version>${v}</version>"
        case 34: return "  compile 'info.jdavid.ok.json:okjson:${v}'"
        default: return line
      }
    }.join('\n').with { readme.text = it }
  }
  finalizedBy tasks.jacocoTestReport
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives sourcesJar, javadocJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
    }
  }
  repositories {
    maven {
      url "$buildDir/repo"
    }
  }
}


bintray {
  user = 'programingjd'
  key = getBintrayApiKey()
  dryRun = false
  publish = true
  publications = ['mavenJava']
  pkg {
    repo = 'maven'
    name = 'info.jdavid.ok.json'
    websiteUrl = 'https://github.com/programingjd/okjson'
    issueTrackerUrl = 'https://github.com/programingjd/okjson/issues'
    vcsUrl = 'https://github.com/programingjd/okjson.git'
    githubRepo = 'programingjd/okjson'
    githubReleaseNotesFile = 'README.md'
    licenses = ['Apache-2.0']
    labels = ['json','okio','moshi','java']
    publicDownloadNumbers = true
    version {
      name = project.version
      mavenCentralSync {
        sync = false
      }
    }
  }
}

tasks.bintrayUpload.dependsOn tasks.check

def getBintrayApiKey() {
  def f = new File("$projectDir/local.properties")
  def key = f.text.splitEachLine('=', { if (it && it[0] == 'bintrayApiKey') return it[1] })
  //println "Bintray key: ${key}"
  return key
}
